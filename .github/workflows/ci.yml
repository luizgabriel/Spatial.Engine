name: Build

on:
  push:
    branches:
      - master
      - rc/*
    tags:
      - 'v*'

jobs:
  build:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          # - { name: "Ubuntu-Clang", os: ubuntu-20.04, build_type: "Release", conan_preset: "conan-release" }
          - { name: "MacOS-Clang", os: macos-11, build_dir: "build/Release", config_preset: "conan-release", build_preset: "conan-release" }
          - { name: "Windows-MSVC", os: windows-2022, build_dir: "build", config_preset: "conan-default", build_preset: "conan-release" }

    steps:
      - uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ">= 3.5"

      - name: Install Conan
        uses: turtlebrowser/get-conan@main
        with:
          version: 2.0.4

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: (Windows) Setup MSBuild
        if: contains(matrix.config.os, 'windows')
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64

      - name: (Windows) Setup Windows Dependencies
        if: contains(matrix.config.os, 'windows')
        shell: bash
        run: choco install windows-sdk-10-version-2004-windbg wixtoolset

      - name: (Linux) Setup Linux Dependencies
        if: contains(matrix.config.os, 'ubuntu')
        shell: bash
        run: |
          sudo apt-get install libglu1-mesa-dev libxi-dev libxcomposite-dev libxxf86vm-dev libx11-dev libx11-xcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev
          sudo apt-get install libxaw7-dev libxcursor-dev libxdamage-dev libxinerama-dev libxmuu-dev libxrandr-dev libxres-dev libxss-dev libxtst-dev libxv-dev libxvmc-dev
          sudo apt-get install libxcb-render-util0-dev libxcb-xkb-dev libxcb-icccm4-dev libxcb-image0-dev libxcb-keysyms1-dev libxcb-randr0-dev libxcb-shape0-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-xinerama0-dev libxcb-dri3-dev libxcb-cursor-dev libxcb-util-dev

      - name: (Linux) Set up Clang
        if: contains(matrix.config.os, 'ubuntu')
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64

      - name: Read Conan Profile
        id: conan_profile
        uses: jaywcjlove/github-action-read-file@main
        with:
          path: .github/workflows/profiles/${{ matrix.config.name }}.txt

      - name: Set up Conan Profile
        shell: bash
        run: |
          conan profile detect
          echo "Overwriting Conan Profile with: ${{ steps.conan_profile.outputs.content }}"
          echo "${{ steps.conan_profile.outputs.content }}" > $(conan profile path default)

      - name: (Conan) Build Dependencies
        shell: bash
        run: |
          conan install . --build=missing
      
      - name: (Cmake) Configure
        shell: bash
        run: cmake --preset ${{ matrix.config.config_preset }}

      - name: (Cmake) Build
        shell: bash
        run: cmake --build . --preset ${{ matrix.config.build_preset }}

      - name: (CTest) Run Tests
        shell: bash
        run: ctest . --preset ${{ matrix.config.build_preset }} -E "(Application)" --output-on-failure

      - name: (CPack) Generate Package
        if: contains(github.ref, 'tags/v')
        shell: bash
        run: cmake --build . --preset ${{ matrix.config.build_preset }} --target package

      - id: get_version
        uses: battila7/get-version-action@v2

      - name: Upload artifacts
        if: contains(github.ref, 'tags/v')
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.config.name }}-${{ steps.get_version.outputs.VERSION }}
          if-no-files-found: error
          path: |
            build/**/package/*.dmg
            build/**/package/*.deb
            build/package/*.msi

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Release
        uses: fnkr/github-action-ghr@v1
        env:
          GHR_PATH: artifacts/
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}