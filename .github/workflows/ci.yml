name: Build

on:
  push:
    branches:
      - master
      - rc/*
    tags:
      - 'v*'

jobs:
  build:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          # - { name: "Ubuntu-Clang", os: ubuntu-20.04, preset: "Linux-Release" }
          - { name: "MacOS-Clang", os: macos-11, build_type: "Release", conan_preset: "conan-release" }
          # - { name: "Windows-MSVC", os: windows-2022, preset: "Windows-Release" }
          # - { name: "Windows-2019-MSVC", os: windows-2019, preset: "Windows-2019-Release" }

    steps:
      - uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: ">= 3.5"

      - name: Install Conan
        uses: turtlebrowser/get-conan@main
        with:
          version: 2.0.4

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: (Windows) Setup MSBuild
        if: contains(matrix.config.os, 'windows')
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64

      - name: (Windows) Setup Windows 10 SDK 10.0.19041.0
        if: contains(matrix.config.os, 'windows')
        shell: bash
        run: choco install windows-sdk-10-version-2004-windbg

      - name: (Linux) Setup Linux Dependencies
        if: contains(matrix.config.os, 'ubuntu')
        shell: bash
        run: sudo apt-get install mesa-common-dev libxi-dev libxxf86vm-dev

      - name: (Linux) Set up Clang
        if: contains(matrix.config.os, 'ubuntu')
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64

      - name: (Conan) Build Dependencies
        shell: bash
        run: conan install . --build=missing -s build_type=${{ matrix.config.build_type }}
      
      - name: (Cmake) Configure
        shell: bash
        run: cmake --preset ${{ matrix.config.conan_preset }}

      - name: (Cmake) Build
        shell: bash
        run: cmake --build . --preset ${{ matrix.config.conan_preset }}

      - name: (CTest) Run Tests
        shell: bash
        run: pushd out/build/${{ matrix.config.build_type }} && ctest --output-on-failure && popd

      - name: (CPack) Generate Package
        if: contains(github.ref, 'tags/v')
        shell: bash
        run: cmake --build . --preset ${{ matrix.config.conan_preset }} --target package

      - name: Get the version
        if: contains(github.ref, 'tags/v')
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Upload artifacts
        if: contains(github.ref, 'tags/v')
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.config.name }}-${{ steps.get_version.outputs.VERSION }}
          if-no-files-found: error
          path: |
            ${{ github.workspace }}/out/package/${{ matrix.config.preset }}/*.dmg

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Get the version
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Release
        uses: fnkr/github-action-ghr@v1
        env:
          GHR_PATH: artifacts/
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}