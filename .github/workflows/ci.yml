name: Build

on:
  push:
    branches:
      - master
      - feature/*
      - release/*
    tags:
      - 'v*'

jobs:
  build:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { name: "Ubuntu-Clang", os: ubuntu-20.04, preset: "Linux-Release" }
          - { name: "MacOS-Clang", os: macos-11, preset: "MacOS-Release" }
          - { name: "Windows-MSVC", os: windows-2022, preset: "Windows-Release" }

    steps:
      - uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: ">= 3.5"

      - name: (Windows) Setup MSBuild
        if: matrix.config.os == 'windows-2022'
        uses: microsoft/setup-msbuild@v1.1
        with:
          msbuild-architecture: x64

      - name: (Linux) Setup Linux Dependencies
        if: matrix.config.os == 'ubuntu-20.04'
        shell: bash
        run: |
          sudo apt-get install ninja-build mesa-common-dev libxi-dev libxxf86vm-dev

      - name: (Ubuntu) Set up Clang
        if: matrix.config.os == 'ubuntu-20.04'
        uses: egor-tensin/setup-clang@v1
        with:
          version: latest
          platform: x64

      - name: Install Conan
        uses: turtlebrowser/get-conan@main

      - name: Configure
        shell: bash
        run: python $GITHUB_WORKSPACE/cli.py configure --preset=${{ matrix.config.preset }}

      - name: Build
        shell: bash
        run: python $GITHUB_WORKSPACE/cli.py build --preset=${{ matrix.config.preset }}

      - name: Run Tests
        shell: bash
        run: python $GITHUB_WORKSPACE/cli.py test --preset=${{ matrix.config.preset }}

      - name: Install
        shell: bash
        run: python $GITHUB_WORKSPACE/cli.py install --preset=${{ matrix.config.preset }}

      - name: Get the version
        if: contains(github.ref, 'tags/v')
        id: get_version
        shell: bash
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Upload artifacts
        if: contains(github.ref, 'tags/v')
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.config.name }}-${{ steps.get_version.outputs.VERSION }}.tar.xz
          path: out/install/${{ matrix.config.preset }}/*

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2

      - name: Upload to Release
        uses: meeDamian/github-release@2.0
        with:
          files: ${{ matrix.config.name }}-${{ steps.get_version.outputs.VERSION }}.tar.xz
          gzip: folders
          token: ${{ secrets.GITHUB_TOKEN }}