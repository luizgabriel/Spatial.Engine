name: Build

on:
  push:
    branches:
      - master
      - feature/*
      - release/*
    tags:
      - 'v*'

env:
  CONAN_SYSREQUIRES_MODE: enabled

jobs:
  build:
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { name: "Windows-MSVC", os: windows-latest, gen: "Visual Studio 16 2019", cc: "cl", cxx: "cl" }
          - { name: "Ubuntu-Clang", os: ubuntu-latest, gen: "Ninja", cc: "clang", cxx: "clang++" }
          - { name: "MacOS-Clang", os: macos-latest, gen: "CodeBlocks - Unix Makefiles", cc: "clang", cxx: "clang++" }

    steps:
      - uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v1
        with:
          python-version: ">= 3.5"

      - name: Setup MSBuild
        if: matrix.config.gen == 'Visual Studio 16 2019'
        uses: microsoft/setup-msbuild@v1.1
        with:
          vs-version: '[16.4,16.5)'

      - name: Install Ninja
        if: matrix.config.gen == 'Ninja'
        uses: turtlesec-no/get-ninja@main

      - name: Install Conan
        uses: turtlebrowser/get-conan@main

      - name: Setup Vendor Packages
        run: |
          python3 $GITHUB_WORKSPACE/setup.py

      - name: Cache Conan Data
        uses: actions/cache@v2
        with:
          path: ~/.conan/
          key: ${{ runner.os }}-${{ hashFiles('conanfile.py') }}

      - name: Build & Test
        uses: ashutoshvarma/action-cmake-build@master
        with:
          build-dir: ${{ runner.workspace }}/build/
          cc: ${{ matrix.config.cc }}
          cxx: ${{ matrix.config.cxx }}
          build-type: Release
          configure-options: -G ${{ matrix.config.gen }} -DSPATIAL_BUILD_TESTS=ON -DCMAKE_INSTALL_PREFIX=${{ runner.workspace }}/install
          run-test: true
          install-build: true
          parallel: 14

      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: macOS.tar.xz
          path: ${{runner.workspace}}/install/*

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Upload to Release
        uses: meeDamian/github-release@2.0
        with:
          files: ${{ matrix.config.name }}-${{ steps.get_version.outputs.VERSION }}.tar.xz
          gzip: folders
          token: ${{ secrets.GITHUB_TOKEN }}