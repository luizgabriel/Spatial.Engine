import("//build/toolchain/gcc_toolchain.gni")

gcc_toolchain("gcc_x86") {
  if (getenv("CC") == "") {
    cc = "gcc"
  } else {
    cc = getenv("CC")
  }

  if (getenv("CXX") == "") {
    cxx = "g++"
  } else {
    cxx = getenv("CXX")
  }

  if (getenv("AR") == "") {
    ar = "ar"
  } else {
    ar = getenv("AR")
  }

  if (getenv("NM") == "") {
    nm = "nm"
  } else {
    nm  = getenv("NM")
  }

  readelf = "readelf"
  ld = cxx

  # Output linker map files for binary size analysis.
  enable_linker_map = true

  toolchain_args = {
    current_cpu = "x86"
    current_os = "linux"

    # reclient does not support gcc.
    use_rbe = false
    is_clang = false
  }
}


gcc_toolchain("gcc_x86_64") {
  if (getenv("CC") == "") {
    cc = "gcc"
  } else {
    cc = getenv("CC")
  }

  if (getenv("CXX") == "") {
    cxx = "g++"
  } else {
    cxx = getenv("CXX")
  }

  if (getenv("AR") == "") {
    ar = "ar"
  } else {
    ar = getenv("AR")
  }

  if (getenv("NM") == "") {
    nm = "nm"
  } else {
    nm  = getenv("NM")
  }

  readelf = "readelf"
  ld = cxx

  # Output linker map files for binary size analysis.
  enable_linker_map = true

  toolchain_args = {
    current_cpu = "x64"
    current_os = "linux"

    # reclient does not support gcc.
    use_rbe = false
    is_clang = false
  }
}


gcc_toolchain("clang_x86") {
  if (getenv("CC") == "") {
    cc = "clang"
  } else {
    cc = getenv("CC")
  }

  if (getenv("CXX") == "") {
    cxx = "clang++"
  } else {
    cxx = getenv("CXX")
  }

  if (getenv("AR") == "") {
    ar = "ar"
  } else {
    ar = getenv("AR")
  }

  if (getenv("NM") == "") {
    nm = "nm"
  } else {
    nm  = getenv("NM")
  }

  ld = cxx
  readelf = "readelf"

  # Output linker map files for binary size analysis.
  enable_linker_map = true

  toolchain_args = {
    current_cpu = "x86"
    current_os = "linux"
  }
}

gcc_toolchain("clang_x86_64") {
  if (getenv("CC") == "") {
    cc = "clang"
  } else {
    cc = getenv("CC")
  }

  if (getenv("CXX") == "") {
    cxx = "clang++"
  } else {
    cxx = getenv("CXX")
  }

  if (getenv("AR") == "") {
    ar = "ar"
  } else {
    ar = getenv("AR")
  }

  if (getenv("NM") == "") {
    nm = "nm"
  } else {
    nm  = getenv("NM")
  }

  ld = cxx
  readelf = "readelf"

  # Output linker map files for binary size analysis.
  enable_linker_map = true

  toolchain_args = {
    current_cpu = "x64"
    current_os = "linux"
  }
}